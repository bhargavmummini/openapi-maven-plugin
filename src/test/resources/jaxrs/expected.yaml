openapi: 3.0.1
info:
  title: OpenAPI Maven Plugin Sample
  description: This is a sample.
  termsOfService: https://github.com/youengineering/openapi-maven-plugin
  contact:
    name: Carl KÃ¼sters
    url: https://github.com/carlkuesters
    email: carl.kuesters@youengineering.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1
servers:
  - url: https://www.example.com:8080/api
paths:
  /pet/test/testingArrayResponse:
    get:
      summary: testingArrayResponse
      description: ""
      operationId: TestResource_testingArrayResponse_get
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                uniqueItems: false
                type: array
                items:
                  required:
                    - name
                    - photoUrls
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/PetId'
                    category:
                      $ref: '#/components/schemas/Category'
                    name:
                      $ref: '#/components/schemas/PetName'
                    photoUrls:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        type: string
                        xml:
                          name: photoUrl
                    tags:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        $ref: '#/components/schemas/Tag'
                    status:
                      type: string
                      description: pet status in the store
                      enum:
                        - available,pending,sold
                  xml:
                    name: Pet
      security: []
  /pet/test/testingVendorExtensions:
    get:
      summary: testingVendorExtensions
      description: ""
      operationId: TestResource_testingVendorExtensions_get
      responses:
        default:
          description: successful operation
      security: []
  /pet/pets/{petName}:
    get:
      summary: Finds Pets by name
      description: ""
      operationId: TestResource_findPetByPetName_get
      parameters:
        - name: petName
          in: path
          description: petName
          required: true
          schema:
            pattern: '[^/]*'
            type: string
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
        "400":
          description: Invalid pet name
      security: []
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate
        API error conditions
      operationId: TestResource_getPetById_get
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 5
            minimum: 1
            pattern: '[0-9]'
            type: integer
            format: int64
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security: []
    post:
      summary: Updates a pet in the store with form data
      description: ""
      operationId: TestResource_updatePetWithForm_post
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myHeader
          in: header
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: intValue
          in: header
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: listValue
          in: query
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myNestedBeanHeader
          in: header
          description: Header from nested bean
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: constructorInjectedHeader
          in: header
          description: Header injected at constructor
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: testIntegerAllowableValues
          in: query
          description: testIntegerAllowableValues
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: constrainedField
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myParentHeader
          in: header
          description: Header from parent
          schema:
            $ref: '#/components/schemas/MyBean'
      responses:
        "405":
          description: Invalid input
      security: []
    delete:
      summary: Deletes a pet
      description: ""
      operationId: TestResource_deletePet_delete
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security: []
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: TestResource_findPetsByStatus_get
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
            default: available
            enum:
              - available,pending,sold
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                uniqueItems: false
                type: array
                items:
                  required:
                    - name
                    - photoUrls
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/PetId'
                    category:
                      $ref: '#/components/schemas/Category'
                    name:
                      $ref: '#/components/schemas/PetName'
                    photoUrls:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        type: string
                        xml:
                          name: photoUrl
                    tags:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        $ref: '#/components/schemas/Tag'
                    status:
                      type: string
                      description: pet status in the store
                      enum:
                        - available,pending,sold
                  xml:
                    name: Pet
        "400":
          description: Invalid status value
      security: []
  /pet:
    get:
      summary: Returns pet
      description: ""
      operationId: TestResource_get_get
      responses:
        "200":
          description: ""
          content:
            application/xml:
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
            application/json:
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
      security: []
    put:
      summary: Update an existing pet
      description: ""
      operationId: TestResource_updatePet_put
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Invalid input
      security: []
    post:
      summary: Add a new pet to the store
      description: ""
      operationId: TestResource_addPet_post
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
        "405":
          description: Invalid input
      security: []
  /pet/test/extensions:
    get:
      summary: testExtensions
      description: ""
      operationId: TestResource_testingExtensions_get
      responses:
        "200":
          description: ""
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security: []
      x-:
        extensionName3: extensionValue3
      x-firstExtension:
        extensionName2: extensionValue2
        extensionName1: extensionValue1
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: TestResource_findPetsByTags_get
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          schema:
            type: string
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                uniqueItems: false
                type: array
                items:
                  required:
                    - name
                    - photoUrls
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/PetId'
                    category:
                      $ref: '#/components/schemas/Category'
                    name:
                      $ref: '#/components/schemas/PetName'
                    photoUrls:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        type: string
                        xml:
                          name: photoUrl
                    tags:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        $ref: '#/components/schemas/Tag'
                    status:
                      type: string
                      description: pet status in the store
                      enum:
                        - available,pending,sold
                  xml:
                    name: Pet
        "400":
          description: Invalid tag value
      deprecated: true
      security: []
  /pet/findAll:
    get:
      summary: Finds all Pets
      description: Returns a paginated list of all the Pets.
      operationId: TestResource_findAllPaginated_get
      parameters:
        - name: pageNumber
          in: query
          description: pageNumber
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: ""
          content:
            '*/*':
              schema:
                uniqueItems: false
                type: array
                items:
                  required:
                    - name
                    - photoUrls
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/PetId'
                    category:
                      $ref: '#/components/schemas/Category'
                    name:
                      $ref: '#/components/schemas/PetName'
                    photoUrls:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        type: string
                        xml:
                          name: photoUrl
                    tags:
                      type: array
                      xml:
                        wrapped: true
                      items:
                        $ref: '#/components/schemas/Tag'
                    status:
                      type: string
                      description: pet status in the store
                      enum:
                        - available,pending,sold
                  xml:
                    name: Pet
        "400":
          description: Invalid page number value
      security: []
  /pet/{petId}/testInjectParam:
    post:
      summary: Updates a pet in the store with form data
      description: ""
      operationId: TestResource_updatePetWithFormViaInjectParam_post
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myHeader
          in: header
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: intValue
          in: header
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: listValue
          in: query
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myNestedBeanHeader
          in: header
          description: Header from nested bean
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: constructorInjectedHeader
          in: header
          description: Header injected at constructor
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: testIntegerAllowableValues
          in: query
          description: testIntegerAllowableValues
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: constrainedField
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/MyBean'
        - name: myParentHeader
          in: header
          description: Header from parent
          schema:
            $ref: '#/components/schemas/MyBean'
      responses:
        "405":
          description: Invalid input
      security: []
  /pet/test:
    get:
      summary: Returns pet
      description: ""
      operationId: TestResource_test_get
      parameters:
        - name: pet
          in: query
          description: Test pet as json string in query
          schema:
            $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: ""
          content:
            application/xml:
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
            application/json:
              schema:
                required:
                  - name
                  - photoUrls
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/PetId'
                  category:
                    $ref: '#/components/schemas/Category'
                  name:
                    $ref: '#/components/schemas/PetName'
                  photoUrls:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      type: string
                      xml:
                        name: photoUrl
                  tags:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Tag'
                  status:
                    type: string
                    description: pet status in the store
                    enum:
                      - available,pending,sold
                xml:
                  name: Pet
      security: []
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          xml:
            namespace: http://com.wordnik/sample/model/category
        name:
          type: string
          xml:
            namespace: http://com.wordnik/sample/model/category
      xml:
        name: Category
        namespace: http://com.wordnik/sample/model/category
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PetId'
        category:
          $ref: '#/components/schemas/Category'
        name:
          $ref: '#/components/schemas/PetName'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available,pending,sold
      xml:
        name: Pet
    PetId:
      type: object
    PetName:
      type: object
      properties:
        name:
          type: string
          writeOnly: true
      example: doggie
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    MyNestedBean:
      type: object
      properties:
        myNestedBeanHeader:
          type: string
    MyConstructorInjectedNestedBean:
      type: object
      properties:
        constructorInjectedHeader:
          type: string
    MyBean:
      required:
        - constrainedField
      type: object
      properties:
        myParentheader:
          type: string
        petId:
          type: string
        name:
          type: string
        status:
          type: string
        myHeader:
          type: string
        intValue:
          type: integer
          format: int32
        hiddenValue:
          type: string
        listValue:
          type: array
          items:
            type: string
        nestedBean:
          $ref: '#/components/schemas/MyNestedBean'
        constructorInjectedNestedBean:
          $ref: '#/components/schemas/MyConstructorInjectedNestedBean'
        testIntegerAllowableValues:
          type: integer
          format: int32
        constrainedField:
          maximum: 75
          minimum: 25
          type: integer
          format: int32
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        authorizationCode:
          authorizationUrl: https://example.com/api/oauth/dialog
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
